{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","getSensorData","fetch","then","res","json","console","log","setState","sensorDatas","target","state","jsontest","this","intervalId","setInterval","bind","className","class","sensordata","Component","Accel","width","height","data","margin","top","right","left","bottom","strokeDasharray","dataKey","ticks","type","stroke","React","Linear","Gyro","angle","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ea6c1ae5.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ReferenceLine\n} from \"recharts\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      sensorDatas: [],\n      jsontest: []\n    };\n  }\n  componentDidMount() {\n    this.intervalId = setInterval(this.getSensorData.bind(this), 3000);\n  }\n  //センサー値取得\n  getSensorData = () => {\n    fetch(\"/sensorData\")\n      .then(res => res.json())\n      .then(res => {\n        console.log(res);\n        this.setState({ sensorDatas: res.target });\n      });\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>９軸センサー値取得</h1>\n        <div class=\"sensorGraph\">\n          <p>加速度グラフ</p>\n          <Accel sensordata={this.state.sensorDatas} />\n        </div>\n        <div class=\"sensorGraph\">\n          <p>地磁気グラフ</p>\n          <Linear sensordata={this.state.sensorDatas} />\n        </div>\n        <div class=\"sensorGraph\">\n          <p>角速度グラフ</p>\n          <Gyro sensordata={this.state.sensorDatas} />\n        </div>\n      </div>\n    );\n  }\n}\nclass Accel extends React.Component {\n  render() {\n    return (\n      <LineChart\n        width={500}\n        height={300}\n        data={this.props.sensordata}\n        margin={{\n          top: 20,\n          right: 50,\n          left: 20,\n          bottom: 5\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"\" />\n        <YAxis ticks={[-1, -0.5, 0, 0.5, 1]} />\n        <Tooltip />\n        <Legend />\n        <Line type=\"monotone\" dataKey=\"ax\" stroke=\"#8884d8\" />\n        <Line type=\"monotone\" dataKey=\"ay\" stroke=\"#82ca9d\" />\n        <Line type=\"monotone\" dataKey=\"az\" stroke=\"#82ca9d\" />\n      </LineChart>\n    );\n  }\n}\nclass Linear extends React.Component {\n  render() {\n    return (\n      <LineChart\n        width={500}\n        height={300}\n        data={this.props.sensordata}\n        margin={{\n          top: 20,\n          right: 50,\n          left: 20,\n          bottom: 5\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"\" />\n        <YAxis ticks={[-1, -0.5, 0, 0.5, 1]} />\n        <Tooltip />\n        <Legend />\n        <Line type=\"monotone\" dataKey=\"Lx\" stroke=\"#8884d8\" />\n        <Line type=\"monotone\" dataKey=\"Ly\" stroke=\"#82ca9d\" />\n        <Line type=\"monotone\" dataKey=\"Lz\" stroke=\"#82ca9d\" />\n      </LineChart>\n    );\n  }\n}\n\nclass Gyro extends React.Component {\n  render() {\n    return (\n      <LineChart\n        width={500}\n        height={300}\n        data={this.props.sensordata}\n        margin={{\n          top: 20,\n          right: 50,\n          left: 20,\n          bottom: 5\n        }}\n      >\n        <CartesianGrid strokeDasharray=\"3 3\" />\n        <XAxis dataKey=\"\" angle={90} height={90} />\n        <YAxis ticks={[-2, 0, 2, 4, 10]} />\n        <Tooltip />\n        <Legend />\n        <Line type=\"monotone\" dataKey=\"gx\" stroke=\"#8884d8\" />\n        <Line type=\"monotone\" dataKey=\"gy\" stroke=\"#82ca9d\" />\n        <Line type=\"monotone\" dataKey=\"gz\" stroke=\"#82ca9d\" />\n      </LineChart>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}